{
  "version": 3,
  "sources": ["../../src/instantiateGuidoModuleFromFile.ts", "../../src/GuidoEngine.ts"],
  "sourcesContent": ["import type { GuidoModuleFactory } from \"./types\";\n\n/**\n * Load libGUIDOEngine files, than instantiate libGUIDOEngine\n * @param jsFile path to `libGuido-wasm.js`\n * @param wasmFile path to `libGuido-wasm.wasm`\n */\nconst instantiateGuidoModuleFromFile = async (jsFile: string, wasmFile = jsFile.replace(/c?js$/, \"wasm\")) => {\n    let GuidoModule: GuidoModuleFactory;\n    let wasmBinary: Uint8Array | ArrayBuffer;\n    const jsCodeHead = /var (.+) = \\(/;\n    if (typeof globalThis.fetch === \"function\") {\n        let jsCode = await (await fetch(jsFile)).text();\n        jsCode = `${jsCode}\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = URL.createObjectURL(new Blob([jsCode], { type: \"text/javascript\" }));\n        GuidoModule = (await import(/* webpackIgnore: true */jsFileMod)).default;\n        wasmBinary = new Uint8Array(await (await fetch(wasmFile)).arrayBuffer());\n    } else {\n        const { promises: fs } = await import(\"fs\");\n        const { pathToFileURL } = await import(\"url\");\n        let jsCode = (await fs.readFile(jsFile, { encoding: \"utf-8\" }));\n        jsCode = `\nimport process from \"process\";\nimport * as path from \"path\";\nimport { createRequire } from \"module\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst __filename = fileURLToPath(import.meta.url);\nconst require = createRequire(import.meta.url);\n\n${jsCode}\n\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = jsFile.replace(/c?js$/, \"mjs\");\n        await fs.writeFile(jsFileMod, jsCode);\n        GuidoModule = (await import(/* webpackIgnore: true */pathToFileURL(jsFileMod).href)).default;\n        await fs.unlink(jsFileMod);\n        wasmBinary = (await fs.readFile(wasmFile)).buffer;\n    }\n    const guidoModule = await GuidoModule({ wasmBinary });\n    return guidoModule;\n};\n\nexport default instantiateGuidoModuleFromFile;\n", "import { GuidoErrCode, PianoRollType } from \"./enums\";\nimport { GuidoEngineAdapter, ARHandler, GRHandler, GuidoLayoutSettings, GuidoDate, GuidoPageFormat, GuidoVersion, GuidoParser, ParserError, GuidoStream, PianoRoll, LimitParams, GuidoFactoryAdapter, GuidoPianoRollAdapter, GuidoReducedProportionalAdapter, GuidoScoreMap, GuidoModule } from \"./types\";\n\n//----------------------------------------------------------------------------\n// GUIDOEngine interface\n//----------------------------------------------------------------------------\nclass GuidoEngine {\n\n    private fEngine: GuidoEngineAdapter;\n    private fPianoRoll: GuidoPianoRollAdapter;\n    private fScoreMap: GuidoScoreMap;\n    private fFactory: GuidoFactoryAdapter;\n    private fSPR: GuidoReducedProportionalAdapter;\n\n    constructor(module: GuidoModule) {\n        this.fEngine = new module.GuidoEngineAdapter();\n        this.fScoreMap = new module.GUIDOScoreMap();\n        this.fPianoRoll = new module.GUIDOPianoRollAdapter();\n        this.fFactory = new module.GUIDOFactoryAdapter();\n        this.fSPR = new module.GUIDOReducedProportionalAdapter();\n        this.fEngine.init();\n    }\n\n    //------------------------------------------------------------------------\n    // Guido Engine interface\n    start(): void { this.fEngine.init(); }\n    shutdown(): void { this.fEngine.shutdown(); }\n\n    ar2gr(ar: ARHandler): GRHandler { return this.fEngine.ar2gr(ar); }\n    ar2grSettings(ar: ARHandler, settings: GuidoLayoutSettings): GRHandler { return this.fEngine.ar2grSettings(ar, settings); }\n    updateGR(gr: GRHandler): GuidoErrCode { return this.fEngine.updateGR(gr); }\n    updateGRSettings(gr: GRHandler, settings: GuidoLayoutSettings): GuidoErrCode { return this.fEngine.updateGRSettings(gr, settings); }\n    freeAR(ar: ARHandler): void { this.fEngine.freeAR(ar); }\n    freeGR(gr: GRHandler): void { this.fEngine.freeGR(gr); }\n    getDefaultLayoutSettings(): GuidoLayoutSettings { return this.fEngine.getDefaultLayoutSettings(); }\n\n    resizePageToMusic(gr: GRHandler): GuidoErrCode { return this.fEngine.resizePageToMusic(gr); }\n    getErrorString(errCode: GuidoErrCode): string { return this.fEngine.getErrorString(errCode); }\n    showElement(gr: GRHandler, elt: number, status: boolean): GuidoErrCode { return this.fEngine.showElement(gr, elt, status); }\n\n    countVoices(ar: ARHandler): number { return this.fEngine.countVoices(ar); }\n    getPageCount(gr: GRHandler): number { return this.fEngine.getPageCount(gr); }\n    getSystemCount(gr: GRHandler, page: number): number { return this.fEngine.getSystemCount(gr, page); }\n    duration(gr: GRHandler): GuidoDate { return this.fEngine.duration(gr); }\n\n    findEventPage(gr: GRHandler, date: GuidoDate): number { return this.fEngine.findEventPage(gr, date); }\n    findPageAt(gr: GRHandler, date: GuidoDate): number { return this.fEngine.findPageAt(gr, date); }\n    getPageDate(gr: GRHandler, pageNum: number): GuidoDate { return this.fEngine.getPageDate(gr, pageNum); }\n\n    gr2SVG(gr: GRHandler, page: number, embedFont: boolean, mappingMode: number): string { return this.fEngine.gr2SVG(gr, page, embedFont, mappingMode); }\n    gr2SVGColored(gr: GRHandler, page: number, r: number, g: number, b: number, embedFont: boolean): string { return this.fEngine.gr2SVGColored(gr, page, r, g, b, embedFont); }\n\n    abstractExport(gr: GRHandler, page: number): string { return this.fEngine.abstractExport(gr, page); }\n    binaryExport(gr: GRHandler, page: number): string { return this.fEngine.binaryExport(gr, page); }\n    jsExport(gr: GRHandler, page: number): GuidoErrCode { return this.fEngine.javascriptExport(gr, page); }\n\n    setDefaultPageFormat(format: GuidoPageFormat): void { this.fEngine.setDefaultPageFormat(format); }\n    getDefaultPageFormat(): GuidoPageFormat { return this.fEngine.getDefaultPageFormat(); }\n\n    setDrawBoundingBoxes(bmap: number): void { this.fEngine.setDrawBoundingBoxes(bmap); }\n    getDrawBoundingBoxes(): number { return this.fEngine.getDrawBoundingBoxes(); }\n    getPageFormat(gr: GRHandler, page: number): GuidoPageFormat { return this.fEngine.getPageFormat(gr, page); }\n\n    unit2CM(val: number): number { return this.fEngine.unit2CM(val); }\n    cm2Unit(val: number): number { return this.fEngine.cm2Unit(val); }\n    unit2Inches(val: number): number { return this.fEngine.unit2Inches(val); }\n    inches2Unit(val: number): number { return this.fEngine.inches2Unit(val); }\n    getLineSpace(): number { return this.fEngine.getLineSpace(); }\n\n    getVersion(): GuidoVersion { return this.fEngine.getVersion(); }\n    getFloatVersion(): number { let v = this.fEngine.getVersion(); return parseFloat(v.major + \".\" + v.minor + v.sub); }\n    getVersionStr(): string { return this.fEngine.getVersionStr(); }\n    checkVersionNums(major: number, minor: number, sub: number): GuidoErrCode { return this.fEngine.checkVersionNums(major, minor, sub); }\n\n    markVoice(ar: ARHandler, voicenum: number,\n        date: GuidoDate, duration: GuidoDate,\n        r: number, g: number, b: number): GuidoErrCode { return this.fEngine.markVoice(ar, voicenum, date, duration, r, g, b); }\n\n    openParser(): GuidoParser { return this.fEngine.openParser(); }\n    closeParser(p: GuidoParser): GuidoErrCode { return this.fEngine.closeParser(p); }\n    file2AR(p: GuidoParser, file: string): ARHandler { return this.fEngine.file2AR(p, file); }\n    string2AR(p: GuidoParser, gmn: string): ARHandler { return this.fEngine.string2AR(p, gmn); }\n    parserGetErrorCode(p: GuidoParser): ParserError { return this.fEngine.parserGetErrorCode(p); }\n\n    openStream(): GuidoStream { return this.fEngine.openStream(); }\n    closeStream(s: GuidoStream): GuidoErrCode { return this.fEngine.closeStream(s); }\n    getStream(s: GuidoStream): string { return this.fEngine.getStream(s); }\n    stream2AR(p: GuidoParser, stream: GuidoStream): ARHandler { return this.fEngine.stream2AR(p, stream); }\n    writeStream(s: GuidoStream, str: string): GuidoErrCode { return this.fEngine.writeStream(s, str); }\n    resetStream(s: GuidoStream): GuidoErrCode { return this.fEngine.resetStream(s); }\n\n    getParsingTime(ar: ARHandler): number { return this.fEngine.getParsingTime(ar); }\n    getAR2GRTime(gr: GRHandler): number { return this.fEngine.getAR2GRTime(gr); }\n    getOnDrawTime(gr: GRHandler): number { return this.fEngine.getOnDrawTime(gr); }\n\n    //------------------------------------------------------------------------\n    // Guido mappings interface\n    getPageMap(gr: GRHandler, page: number, w: number, h: number): string { return this.fScoreMap.getPageMap(gr, page, w, h); }\n    getStaffMap(gr: GRHandler, page: number, w: number, h: number, staff: number): string { return this.fScoreMap.getStaffMap(gr, page, w, h, staff); }\n    getVoiceMap(gr: GRHandler, page: number, w: number, h: number, voice: number): string { return this.fScoreMap.getVoiceMap(gr, page, w, h, voice); }\n    getSystemMap(gr: GRHandler, page: number, w: number, h: number): string { return this.fScoreMap.getSystemMap(gr, page, w, h); }\n    getTime(date: GuidoDate, map: string): string { return this.fScoreMap.getTime(date, map); }\n    getPoint(x: number, y: number, map: string): string { return this.fScoreMap.getPoint(x, y, map); }\n    getTimeMap(ar: ARHandler): string { return this.fScoreMap.getTimeMap(ar); }\n    getPianoRollMap(pr: PianoRoll, width: number, height: number): string { return this.fScoreMap.getPianoRollMap(pr, width, height); }\n\n    //------------------------------------------------------------------------\n    // Guido piano roll interface\n    pianoRoll(): GuidoPianoRollAdapter { return this.fPianoRoll; }\n\n    ar2PianoRoll(type: PianoRollType, ar: ARHandler): PianoRoll { return this.fPianoRoll.ar2PianoRoll(type, ar); }\n    destroyPianoRoll(pr: PianoRoll): GuidoErrCode { return this.fPianoRoll.destroyPianoRoll(pr); }\n    prSetLimits(pr: PianoRoll, limits: LimitParams): GuidoErrCode { return this.fPianoRoll.setLimits(pr, limits); }\n    prEnableKeyboard(pr: PianoRoll, status: boolean): GuidoErrCode { return this.fPianoRoll.enableKeyboard(pr, status); }\n    prGetKeyboardWidth(pr: PianoRoll, height: number): number { return this.fPianoRoll.getKeyboardWidth(pr, height); }\n    prEnableAutoVoicesColoration(pr: PianoRoll, status: boolean): GuidoErrCode { return this.fPianoRoll.enableAutoVoicesColoration(pr, status); }\n\n    prSetVoiceColor(pr: PianoRoll, voice: number, r: number, g: number, b: number, a: number): GuidoErrCode { return this.fPianoRoll.setRGBColorToVoice(pr, voice, r, g, b, a); }\n    prSetVoiceNamedColor(pr: PianoRoll, voice: number, c: string): GuidoErrCode { return this.fPianoRoll.setColorToVoice(pr, voice, c); }\n    prRemoveVoiceColor(pr: PianoRoll, voice: number): GuidoErrCode { return this.fPianoRoll.removeColorToVoice(pr, voice); }\n    prEnableMeasureBars(pr: PianoRoll, status: boolean): GuidoErrCode { return this.fPianoRoll.enableMeasureBars(pr, status); }\n    prSetPitchLinesDisplayMode(pr: PianoRoll, mode: number): GuidoErrCode { return this.fPianoRoll.setPitchLinesDisplayMode(pr, mode); }\n\n    proll2svg(pr: PianoRoll, w: number, h: number) { return this.fPianoRoll.svgExport(pr, w, h); }\n    prGetMap(pr: PianoRoll, width: number, height: number): string { return this.fPianoRoll.getMap(pr, width, height); }\n\n    prSvgExport(pr: PianoRoll, width: number, height: number): string { return this.fPianoRoll.svgExport(pr, width, height); }\n    prJsExport(pr: PianoRoll, width: number, height: number): GuidoErrCode { return this.fPianoRoll.javascriptExport(pr, width, height); }\n\n    //------------------------------------------------------------------------\n    // Reduced Proportional representation\n    // no relay for the interface\n    reducedProp(): GuidoReducedProportionalAdapter { return this.fSPR; }\n\n\n    //------------------------------------------------------------------------\n    // Guido factory interface\n    openMusic(): GuidoErrCode { return this.fFactory.openMusic(); }\n    closeMusic(): ARHandler { return this.fFactory.closeMusic(); }\n    openVoice(): GuidoErrCode { return this.fFactory.openVoice(); }\n    closeVoice(): GuidoErrCode { return this.fFactory.closeVoice(); }\n    openChord(): GuidoErrCode { return this.fFactory.openChord(); }\n    closeChord(): GuidoErrCode { return this.fFactory.closeChord(); }\n    insertCommata(): GuidoErrCode { return this.fFactory.insertCommata(); }\n\n    openEvent(name: string): GuidoErrCode { return this.fFactory.openEvent(name); }\n    closeEvent(): GuidoErrCode { return this.fFactory.closeEvent(); }\n    addSharp(): GuidoErrCode { return this.fFactory.addSharp(); }\n    addFlat(): GuidoErrCode { return this.fFactory.addFlat(); }\n    setEventDots(dots: number): GuidoErrCode { return this.fFactory.setEventDots(dots); }\n    setEventAccidentals(acc: number): GuidoErrCode { return this.fFactory.setEventAccidentals(acc); }\n    setOctave(oct: number): GuidoErrCode { return this.fFactory.setOctave(oct); }\n    setDuration(numerator: number, denominator: number): GuidoErrCode { return this.fFactory.setDuration(numerator, denominator); }\n\n    openTag(name: string, tagID: number): GuidoErrCode { return this.fFactory.openTag(name, tagID); }\n    openRangeTag(name: string, tagID: number): GuidoErrCode { return this.fFactory.openRangeTag(name, tagID); }\n    endTag(): GuidoErrCode { return this.fFactory.endTag(); }\n    closeTag(): GuidoErrCode { return this.fFactory.closeTag(); }\n    addTagParameterString(val: string): GuidoErrCode { return this.fFactory.addTagParameterString(val); }\n    addTagParameterInt(val: number): GuidoErrCode { return this.fFactory.addTagParameterInt(val); }\n    addTagParameterFloat(val: number): GuidoErrCode { return this.fFactory.addTagParameterFloat(val); }\n\n    setParameterName(name: string): GuidoErrCode { return this.fFactory.setParameterName(name); }\n    setParameterUnit(unit: string): GuidoErrCode { return this.fFactory.setParameterUnit(unit); }\n}\n\nexport default GuidoEngine;\n"],
  "mappings": "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",
  "names": []
}
